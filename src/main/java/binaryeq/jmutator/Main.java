package binaryeq.jmutator;

import org.apache.commons.cli.*;
import org.pitest.mutationtest.engine.gregor.MethodMutatorFactory;

import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.stream.Collectors;

/**
 * Main class to convert a class files within a folder.
 * @author jens dietrich
 */
public class Main {

    public static void main (String[] args) throws IOException, ParseException {

        Options options = new Options();
        options.addRequiredOption("b", "binaries folder", true, "root folder containing .class files");
        options.addRequiredOption("m", "mutated binaries folder", true, "folder to write the mutated  .class files to");
        options.addRequiredOption("p", "conversion pattern", true, "a pattern used to name mutated class files, must contain the strings $n (the original class file name without extension) and $i (the mutation number, and int))");
        options.addRequiredOption("j", "provenance pattern", true, "a pattern used to name json-encoded provenance files, must contain the strings $n (the original class file name without extension) and $i (the mutation number, and int))");
        options.addRequiredOption("v", "verify", false, "verify generated byte code (verification is ASM-based, will result in error if verification fails)");
        options.addOption("M", "mutationfactories", true, "which mutation factories to use (" + MethodMutatorFactoryFactory.getMethodMutatorFactoryIds().stream().sorted().collect(Collectors.joining(", ")) + "; default: " + MethodMutatorFactoryFactory.getDefaultMethodMutatorFactoriesId() + ")");


        CommandLineParser parser = new DefaultParser();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, args);
        }
        catch (MissingOptionException x) {
            System.out.println(x.getMessage());

            HelpFormatter formatter = new HelpFormatter();
            formatter.printHelp("java -jar jmutator.jar " + Main.class.getName(), options);

            System.exit(1);
        }

        String binDirName = cmd.getOptionValue("b");
        File binDir = new File(binDirName);


        String mutatedBinDirName = cmd.getOptionValue("m");
        File mutatedBinDir = new File(mutatedBinDirName);

        String classConversionPattern = cmd.getOptionValue("p");
        String provenanceInfoConversionPattern = cmd.getOptionValue("j");

        boolean verify = cmd.hasOption("v");

        String mutatorFactoriesId = cmd.getOptionValue("M", MethodMutatorFactoryFactory.getDefaultMethodMutatorFactoriesId());
        System.out.println("Using mutator factories collection '" + mutatorFactoriesId + "'.");
        Collection<MethodMutatorFactory> mutators = MethodMutatorFactoryFactory.getMethodMutatorFactories(mutatorFactoriesId);

        ClassMutator.mutateClassFiles(binDir, mutatedBinDir, classConversionPattern, provenanceInfoConversionPattern, verify, mutators);
    }

}
